[{"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\index.js":"1","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\App.js":"2","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\FormElements\\Button.js":"3","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\FormElements\\Input.js":"4","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\NewDieselForm.js":"5","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\NavLinks.js":"6","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\MainHeader.js":"7","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\MainNavigation.js":"8","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\Home.js":"9","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\NewGasForm.js":"10","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\hooks\\http-hook.js":"11","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\hooks\\form-hook.js":"12","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\UIElements\\LoadingSpinner.js":"13","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\utils\\validators.js":"14"},{"size":174,"mtime":1611307142779,"results":"15","hashOfConfig":"16"},{"size":997,"mtime":1612787550601,"results":"17","hashOfConfig":"16"},{"size":351,"mtime":1611233605191,"results":"18","hashOfConfig":"16"},{"size":2094,"mtime":1612876303450,"results":"19","hashOfConfig":"16"},{"size":749,"mtime":1612355524283,"results":"20","hashOfConfig":"16"},{"size":1302,"mtime":1611314395233,"results":"21","hashOfConfig":"16"},{"size":237,"mtime":1611307273866,"results":"22","hashOfConfig":"16"},{"size":561,"mtime":1611314243435,"results":"23","hashOfConfig":"16"},{"size":105,"mtime":1612166392863,"results":"24","hashOfConfig":"16"},{"size":7089,"mtime":1613048043469,"results":"25","hashOfConfig":"16"},{"size":1556,"mtime":1612792938402,"results":"26","hashOfConfig":"16"},{"size":1746,"mtime":1612871588117,"results":"27","hashOfConfig":"16"},{"size":302,"mtime":1612861162980,"results":"28","hashOfConfig":"16"},{"size":449,"mtime":1612872336712,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1i9enz9",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\index.js",[],["65","66"],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\App.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\FormElements\\Button.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\FormElements\\Input.js",["67"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../utils/validators';\r\n\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE': \r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':   \r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst Input = (props) => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.initialValue || '',\r\n        isTouched: false,\r\n        isValid: props.initialValid || false\r\n    });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        dispatch({type: 'CHANGE', val: event.target.value, validators: props.validators});\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        });\r\n    }\r\n\r\n    const element = props.element === 'input' ? (\r\n        <input \r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        />\r\n        ) : (\r\n            <textarea \r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onBlur={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n\r\n    return <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\r\n        <label htmlFor={props.id}>{props.label}</label>\r\n        {element}\r\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n};\r\n\r\nexport default Input;","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\NewDieselForm.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\NavLinks.js",["68"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport MainHeader from './MainHeader';\r\n\r\nimport './NavLinks.css';\r\n\r\nconst NavLinks = props => {\r\n   \r\n      return (\r\n            // <ul >\r\n            //     <a className=\"nav-links button\" href=\"/test\">\r\n            //         <li  >MERGI MAI DEPARTE</li>\r\n            //     </a>\r\n                \r\n            //     <a className=\"nav-links button\"  href=\"/altul\">\r\n            //         <li>MERGI MAI DEPARTE</li>\r\n            //     </a>\r\n            // </ul>\r\n\r\n           <ul className=\"nav-links\">\r\n                <li>\r\n                    <NavLink to=\"/acasa\">\r\n                        ACASA\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/editeaza_diesel\">\r\n                        EDITEAZA DIESEL\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/editeaza_benzina\">\r\n                        EDITEAZA BENZINA\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/finalizeaza\">\r\n                        FINALIZEAZA\r\n                    </NavLink>\r\n                </li>\r\n           </ul>\r\n        );\r\n};\r\n\r\nexport default NavLinks;","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\MainHeader.js",["69"],"import react from 'react';\r\n\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = props => {\r\n    return (\r\n        <header className=\"main-header\">\r\n            { props.children }\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default MainHeader;","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\Navigation\\MainNavigation.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\Home.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\pages\\NewGasForm.js",["70","71"],"import React, { useEffect, useState } from 'react';\r\nimport Input from '../FormElements/Input';\r\nimport Button from '../FormElements/Button';\r\nimport LoadingSpinner from '../UIElements/LoadingSpinner';\r\n\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport { useForm } from '../hooks/form-hook';\r\n\r\nimport { VALIDATOR_REQUIRE } from '../utils/validators';\r\n\r\nimport './NewGasForm.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst NewGasForm = () => {\r\n    const [loadedData, setLoadedData] = useState();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    let { type, id, filename } = useParams();\r\n\r\n    const dataSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            await sendRequest(`http://localhost:5001/api/gas/${filename}`, \r\n            'PATCH', \r\n            JSON.stringify({\r\n                lambda: formState.inputs.lambda.value,\r\n                hc: formState.inputs.hc.value,\r\n                o2: formState.inputs.o2.value,\r\n                co2: formState.inputs.co2.value,\r\n                co: formState.inputs.co.value,\r\n                coc: formState.inputs.coc.value,\r\n                afr: formState.inputs.afr.value\r\n            }), {'Content-Type': 'application/json'}\r\n            );\r\n\r\n            \r\n        } catch(err) {}\r\n    }\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        lambda: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        hc: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        o2: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        co2: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        co: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        coc: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        afr: {\r\n            value: '',\r\n            isValid: true\r\n        }\r\n    }); \r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const responseData = await sendRequest(`http://localhost:5001/api/gas/${type}/${id}`);\r\n                setLoadedData(responseData);    \r\n                setFormData({\r\n                    lambda: {\r\n                        value: responseData.lambda_1,\r\n                        isValid: true\r\n                    },\r\n                    hc: {\r\n                        value: responseData.hc_1,\r\n                        isValid: true\r\n                    },\r\n                    o2: {\r\n                        value: responseData.o2_1,\r\n                        isValid: true\r\n                    },\r\n                    co2: {\r\n                        value: responseData.co2_1,\r\n                        isValid: true\r\n                    },\r\n                    co: {\r\n                        value: responseData.co_1,\r\n                        isValid: true\r\n                    },\r\n                    coc: {\r\n                        value: responseData.coc_1,\r\n                        isValid: true\r\n                    },\r\n                    afr: {\r\n                        value: responseData.afr_1,\r\n                        isValid: true\r\n                    }\r\n                }, true);\r\n            } catch (err) {console.log(err)}\r\n        };\r\n        fetchData();\r\n    }, [sendRequest, type, id]);\r\n\r\n    if(isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(!loadedData && error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <h2>Could not find data</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"loadedDAta\", loadedData);\r\n    return (\r\n        <React.Fragment>\r\n            { !isLoading && loadedData && \r\n            <form className=\"gas-form\" onSubmit={dataSubmitHandler}>\r\n                <Input\r\n                    id=\"lambda\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Lambda\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.lambda_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"hc\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Hc\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.hc_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"o2\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"O2\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.co2_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"co2\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"CO2\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.co2_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"co\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"CO\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.co_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"coc\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"COcorr.\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.coc_1}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"afr\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"AFR(BNZ)\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"please enter a value\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedData.afr_1}\r\n                    initialValid={true}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>FINALIZEAZA</Button>\r\n            </form>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default NewGasForm;","D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\hooks\\http-hook.js",[],["72","73"],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\hooks\\form-hook.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\UIElements\\LoadingSpinner.js",[],"D:\\proiecte\\sorin ITP\\software diagnoza\\client\\src\\utils\\validators.js",["74"],"import { isValidElement } from \"react\";\r\n\r\nconst VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n\r\n    for (const validator of validators) {\r\n        if(validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n    }\r\n    \r\n    return isValid;\r\n};",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":64,"column":17,"nodeType":"81","endLine":64,"endColumn":38},{"ruleId":"82","severity":1,"message":"83","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"87","line":16,"column":44,"nodeType":"84","messageId":"85","endLine":16,"endColumn":54},{"ruleId":"88","severity":1,"message":"89","line":110,"column":8,"nodeType":"90","endLine":110,"endColumn":31,"suggestions":"91"},{"ruleId":"75","replacedBy":"92"},{"ruleId":"77","replacedBy":"93"},{"ruleId":"82","severity":1,"message":"94","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":24},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'MainHeader' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","'clearError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setFormData'. Either include it or remove the dependency array.","ArrayExpression",["97"],["95"],["96"],"'isValidElement' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [sendRequest, type, id, setFormData]",{"range":"100","text":"101"},[3357,3380],"[sendRequest, type, id, setFormData]"]